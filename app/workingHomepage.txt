"use client";
import React, { useState, useEffect } from "react";
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  addDoc,
} from "firebase/firestore";
import { db } from "../lib/firebase";
import { useRouter } from "next/navigation";

const Home = () => {
  const router = useRouter();
  const [sets, setSets] = useState([]);
  const [filter, setFilter] = useState({
    name: "",
    subject: "",
    topic: "",
    remark: "",
  });
  const [filteredSets, setFilteredSets] = useState([]);
  const [jsonText, setJsonText] = useState("");
  const [subjects, setSubjects] = useState([]);
  const [topics, setTopics] = useState([]);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [passwordInput, setPasswordInput] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const [deleteSetId, setDeleteSetId] = useState(null);
  const [spacedRevisionSetId, setSpacedRevisionSetId] = useState(null);
  const [showFrequencyModal, setShowFrequencyModal] = useState(false);
  const [spacedRevisionFrequency, setSpacedRevisionFrequency] =
    useState("1,3,5,7,21");
  const [upcomingRevisions, setUpcomingRevisions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch saved question sets
        const snapshot = await getDocs(collection(db, "savedQuestions"));
        const data = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setSets(data);
        setFilteredSets(data);

        const uniqueSubjects = [
          ...new Set(data.map((set) => set.subject)),
        ].filter(Boolean);
        setSubjects(uniqueSubjects);

        updateTopics(data, filter.subject);

        // Fetch spaced revisions and filter out expired ones
        const revisionSnapshot = await getDocs(
          collection(db, "SpacedRevision")
        );
        const revisionData = [];
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        for (const doc of revisionSnapshot.docs) {
          const revision = { id: doc.id, ...doc.data() };
          const hasValidDates = revision.revisionDates.some(
            (date) => new Date(date) >= today
          );
          if (hasValidDates) {
            revisionData.push(revision);
          } else {
            await deleteDoc(doc(db, "SpacedRevision", doc.id));
          }
        }
        setUpcomingRevisions(revisionData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, []);

  const updateTopics = (data, selectedSubject) => {
    const filteredTopics = [
      ...new Set(
        data
          .filter((set) => !selectedSubject || set.subject === selectedSubject)
          .map((set) => set.topic)
          .filter(Boolean)
      ),
    ];
    setTopics(filteredTopics);
    if (selectedSubject && !filteredTopics.includes(filter.topic)) {
      setFilter((prev) => ({ ...prev, topic: "" }));
    }
  };

  const handleFilterChange = (field, value) => {
    const newFilter = { ...filter, [field]: value };
    setFilter(newFilter);

    if (field === "subject") {
      updateTopics(sets, value);
    }

    setFilteredSets(
      sets.filter(
        (set) =>
          (!newFilter.name ||
            set.name.toLowerCase().includes(newFilter.name.toLowerCase())) &&
          (!newFilter.subject ||
            set.subject
              .toLowerCase()
              .includes(newFilter.subject.toLowerCase())) &&
          (!newFilter.topic ||
            set.topic?.toLowerCase().includes(newFilter.topic.toLowerCase())) &&
          (!newFilter.remark ||
            set.remark.toLowerCase().includes(newFilter.remark.toLowerCase()))
      )
    );
  };

  const startTestWithQuestions = (questions) => {
    localStorage.setItem("uploadedQuestions", JSON.stringify(questions));
    router.push("/test");
  };

  const handleTextUpload = () => {
    try {
      const questions = JSON.parse(jsonText);
      startTestWithQuestions(questions);
    } catch (error) {
      alert("Invalid JSON format. Please check your input.");
    }
  };

  const handleDelete = async (id) => {
    setDeleteSetId(id);
    setShowPasswordModal(true);
    setPasswordInput("");
    setPasswordError("");
  };

  const handleSpacedRevision = async (id) => {
    setSpacedRevisionSetId(id);
    setShowFrequencyModal(true);
  };

  const handleFrequencySubmit = async (e) => {
    e.preventDefault();
    setShowFrequencyModal(false);
    setShowPasswordModal(true);
    setPasswordInput("");
    setPasswordError("");
  };

  const handlePasswordSubmit = async (e) => {
    e.preventDefault();
    if (passwordInput !== process.env.NEXT_PUBLIC_FIREBASE_ACTION_PASSWORD) {
      setPasswordError("Incorrect password");
      return;
    }

    try {
      if (deleteSetId) {
        await deleteDoc(doc(db, "savedQuestions", deleteSetId));
        const updatedSets = sets.filter((set) => set.id !== deleteSetId);
        setSets(updatedSets);
        setFilteredSets(updatedSets);
        updateTopics(updatedSets, filter.subject);
      } else if (spacedRevisionSetId) {
        const set = sets.find((s) => s.id === spacedRevisionSetId);
        if (set) {
          const frequencyDays = spacedRevisionFrequency.split(",").map(Number);
          const today = new Date();
          const revisionDates = frequencyDays.map((day) => {
            const date = new Date(today);
            date.setDate(today.getDate() + day);
            return date.toISOString().split("T")[0];
          });

          const docRef = await addDoc(collection(db, "SpacedRevision"), {
            questionSetId: spacedRevisionSetId,
            revisionDates,
            createdAt: new Date(),
          });

          setUpcomingRevisions((prev) => [
            ...prev,
            {
              id: docRef.id,
              questionSetId: spacedRevisionSetId,
              revisionDates,
              createdAt: new Date(),
            },
          ]);

          alert("Spaced Revision scheduled successfully!");
        }
      }
      setShowPasswordModal(false);
      setPasswordInput("");
      setPasswordError("");
      setDeleteSetId(null);
      setSpacedRevisionSetId(null);
    } catch (error) {
      console.error("Error performing action:", error);
      alert("Failed to perform action.");
    }
  };

  const handleStartRevision = async (revisionId, questionSetId) => {
    try {
      const questionSetDoc = await getDocs(collection(db, "savedQuestions"));
      const questionSet = questionSetDoc.docs
        .find((doc) => doc.id === questionSetId)
        ?.data();
      if (questionSet?.questions) {
        startTestWithQuestions(questionSet.questions);
      } else {
        alert("Question set not found.");
      }
    } catch (error) {
      console.error("Error fetching questions for revision:", error);
      alert("Failed to start revision.");
    }
  };

  const getTotalQuestions = (questions) => {
    return Array.isArray(questions) ? questions.length : 0;
  };

  const formatRevisionDate = (dateStr) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const revisionDate = new Date(dateStr);
    revisionDate.setHours(0, 0, 0, 0);

    const diffDays = Math.round((revisionDate - today) / (1000 * 60 * 60 * 24));
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Tomorrow";
    return dateStr;
  };

  const isWithinSevenDays = (dateStr) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const revisionDate = new Date(dateStr);
    revisionDate.setHours(0, 0, 0, 0);
    const diffDays = (revisionDate - today) / (1000 * 60 * 60 * 24);
    return diffDays >= 0 && diffDays <= 7;
  };

  // Group revisions by all matching revision dates within 7 days
  const groupRevisionsByDate = () => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const grouped = {};

    // Initialize groups for Today, Tomorrow, and the next 5 days
    grouped["Today"] = [];
    grouped["Tomorrow"] = [];
    for (let i = 2; i <= 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dateStr = date.toISOString().split("T")[0];
      grouped[dateStr] = [];
    }

    // Assign revisions to each matching date within 7 days
    upcomingRevisions.forEach((revision) => {
      revision.revisionDates.forEach((date) => {
        if (isWithinSevenDays(date)) {
          const dateKey = formatRevisionDate(date);
          if (grouped[dateKey]) {
            // Avoid duplicate revisions in the same date group
            if (!grouped[dateKey].some((r) => r.id === revision.id)) {
              grouped[dateKey].push(revision);
            }
          }
        }
      });
    });

    return grouped;
  };

  return (
    <div className="min-h-screen bg-gray-100 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">
          Mock Test Dashboard
        </h1>

        {/* JSON Upload Section */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8 border border-gray-200">
          <textarea
            rows={4}
            value={jsonText}
            onChange={(e) => setJsonText(e.target.value)}
            placeholder="Paste JSON questions here..."
            className="w-full p-3 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors resize-y"
          />
          <button
            onClick={handleTextUpload}
            className="mt-4 w-full sm:w-auto px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors"
          >
            Start Test
          </button>
        </div>

        {/* Upcoming Revisions Section */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8 border border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Upcoming Revisions
          </h2>
          {upcomingRevisions.length === 0 ||
          !upcomingRevisions.some((revision) =>
            revision.revisionDates.some(isWithinSevenDays)
          ) ? (
            <p className="text-sm text-gray-600">
              No upcoming revisions scheduled within 7 days.
            </p>
          ) : (
            <div className="space-y-6">
              {Object.entries(groupRevisionsByDate()).map(
                ([dateLabel, revisions]) => (
                  <div key={dateLabel} className="border-t pt-4">
                    <h3 className="text-lg font-medium text-gray-800 mb-3">
                      {dateLabel}
                    </h3>
                    {revisions.length === 0 ? (
                      <p className="text-sm text-gray-600">
                        No revisions scheduled.
                      </p>
                    ) : (
                      <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Name
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Subject
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Topic
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Questions
                              </th>
                              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Action
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {revisions
                              .sort((a, b) =>
                                a.questionSetId.localeCompare(b.questionSetId)
                              )
                              .map((revision) => {
                                const questionSet = sets.find(
                                  (set) => set.id === revision.questionSetId
                                );
                                return (
                                  <tr
                                    key={revision.id}
                                    className="hover:bg-gray-50 transition-colors"
                                  >
                                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                                      {questionSet?.name || "Unknown"}
                                    </td>
                                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                                      {questionSet?.subject || "Unknown"}
                                    </td>
                                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                                      {questionSet?.topic || "-"}
                                    </td>
                                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                                      {questionSet
                                        ? getTotalQuestions(
                                            questionSet.questions
                                          )
                                        : 0}
                                    </td>
                                    <td className="px-4 py-4 whitespace-nowrap">
                                      <button
                                        onClick={() =>
                                          handleStartRevision(
                                            revision.id,
                                            revision.questionSetId
                                          )
                                        }
                                        className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors text-sm"
                                      >
                                        Start Revision
                                      </button>
                                    </td>
                                  </tr>
                                );
                              })}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
                )
              )}
            </div>
          )}
        </div>

        {/* Question Sets Table */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Question Sets
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-4 gap-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Name
              </label>
              <input
                type="text"
                placeholder="Filter by name"
                value={filter.name}
                onChange={(e) => handleFilterChange("name", e.target.value)}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Subject
              </label>
              <select
                value={filter.subject}
                onChange={(e) => handleFilterChange("subject", e.target.value)}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Subjects</option>
                {subjects.map((subject) => (
                  <option key={subject} value={subject}>
                    {subject}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Topic
              </label>
              <select
                value={filter.topic}
                onChange={(e) => handleFilterChange("topic", e.target.value)}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={!filter.subject}
              >
                <option value="">All Topics</option>
                {topics.map((topic) => (
                  <option key={topic} value={topic}>
                    {topic}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Remark
              </label>
              <input
                type="text"
                placeholder="Filter by remark"
                value={filter.remark}
                onChange={(e) => handleFilterChange("remark", e.target.value)}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Subject
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Topic
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Remark
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Questions
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredSets.length === 0 ? (
                  <tr>
                    <td
                      colSpan={6}
                      className="px-4 py-4 text-center text-sm text-gray-500"
                    >
                      No question sets found.
                    </td>
                  </tr>
                ) : (
                  filteredSets.map((set) => (
                    <tr
                      key={set.id}
                      className="hover:bg-gray-50 transition-colors"
                    >
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                        {set.name}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                        {set.subject}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                        {set.topic || "-"}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                        {set.remark}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                        {getTotalQuestions(set.questions)}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap flex gap-3">
                        <button
                          onClick={() => startTestWithQuestions(set.questions)}
                          className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors text-sm"
                        >
                          Start
                        </button>
                        <button
                          onClick={() => handleSpacedRevision(set.id)}
                          className="px-4 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-colors text-sm"
                        >
                          Schedule Revision
                        </button>
                        <button
                          onClick={() => handleDelete(set.id)}
                          className="px-4 py-2 bg-red-600 text-white font-semibold rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 transition-colors text-sm"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Frequency Modal */}
        {showFrequencyModal && (
          <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Select Revision Frequency
              </h3>
              <form onSubmit={handleFrequencySubmit}>
                <select
                  value={spacedRevisionFrequency}
                  onChange={(e) => setSpacedRevisionFrequency(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                  <option value="1,3,5,7,21">1,3,5,7,21 days</option>
                  <option value="1,5,11,21">1,5,11,21 days</option>
                </select>
                <div className="mt-4 flex gap-3 justify-end">
                  <button
                    type="button"
                    onClick={() => setShowFrequencyModal(false)}
                    className="px-4 py-2 bg-gray-200 text-gray-700 font-semibold rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 text-sm"
                  >
                    Confirm
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Password Modal */}
        {showPasswordModal && (
          <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Enter Password
              </h3>
              <form onSubmit={handlePasswordSubmit}>
                <input
                  type="password"
                  value={passwordInput}
                  onChange={(e) => {
                    setPasswordInput(e.target.value);
                    setPasswordError("");
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter password"
                />
                {passwordError && (
                  <p className="text-red-600 text-sm mt-2">{passwordError}</p>
                )}
                <div className="mt-4 flex gap-3 justify-end">
                  <button
                    type="button"
                    onClick={() => {
                      setShowPasswordModal(false);
                      setPasswordInput("");
                      setPasswordError("");
                      setDeleteSetId(null);
                      setSpacedRevisionSetId(null);
                    }}
                    className="px-4 py-2 bg-gray-200 text-gray-700 font-semibold rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                  >
                    Submit
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;
